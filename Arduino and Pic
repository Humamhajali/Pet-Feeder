#include <xc.h>                // Use for XC8 compiler
#define _XTAL_FREQ 20000000   // Define oscillator frequency (20 MHz)

// CONFIGURATION BITS (For PIC16F877A)
#pragma config FOSC = HS        // Oscillator Selection bits (HS oscillator)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled)
#pragma config PWRTE = ON       // Power-up Timer Enable bit (enabled)
#pragma config BOREN = OFF      // Brown-out Reset Enable bit (disabled)
#pragma config LVP = OFF        // Low-Voltage (Single-Supply) In-Circuit Serial Programming Disable
#pragma config CPD = OFF        // Data EEPROM Memory Code Protection bit (disabled)
#pragma config WRT = OFF        // Flash Program Memory Write Enable bits (Write protection off)
#pragma config CP = OFF         // Flash Program Memory Code Protection bit (disabled)

// LCD Pin Definitions (RW is physically grounded)
#define RS RD0
#define EN RD2

// PIR Sensor Definitions (Only PIR3 remains)
#define PIR3 RD5  // Sensor 3 - Main

// LED Definitions (Only MAIN_LIGHT remains)
#define MAIN_LIGHT RB3  // For PIR3

// Send 4-bit nibble to LCD
void lcd_send_nibble(unsigned char nibble) {
    PORTC = (PORTC & 0x0F) | ((nibble & 0x0F) << 4);
    EN = 1;
    __delay_us(1);
    EN = 0;
    __delay_us(100);
}

// Send a data byte to LCD
void lcd_data(unsigned char data) {
    RS = 1;   // Data mode
    lcd_send_nibble(data >> 4);
    lcd_send_nibble(data);
    __delay_us(100);
}

// Send a command to LCD
void lcd_command(unsigned char command) {
    RS = 0;   // Command mode
    lcd_send_nibble(command >> 4);
    lcd_send_nibble(command);
    if (command == 0x01 || command == 0x02) __delay_ms(2);
}

// Display a string on LCD
void lcd_string(const char *string) {
    while (*string) lcd_data(*string++);
}

// Initialize LCD in 4-bit mode
void lcd_initialize() {
    __delay_ms(20);
    RS = 0;
    lcd_send_nibble(0x03);
    __delay_ms(5);
    lcd_send_nibble(0x03);
    __delay_us(100);
    lcd_send_nibble(0x03);
    __delay_us(100);
    lcd_send_nibble(0x02);     // Set to 4-bit mode
    lcd_command(0x28);         // Function set: 4-bit, 2-line, 5x8 dots
    lcd_command(0x0C);         // Display ON, Cursor OFF
    lcd_command(0x06);         // Entry mode: Increment cursor
    lcd_command(0x01);         // Clear display
    __delay_ms(2);
}

// Control LED based on PIR input
void update_leds() {
    MAIN_LIGHT = PIR3;  // Only control MAIN_LIGHT with PIR3
}

// Update LCD display based on sensor state
void update_display() {
    lcd_command(0x01);  // Clear display
    __delay_ms(2);
    
    if (PIR3) {
        lcd_command(0x80);  // Set cursor to first line
        lcd_string("Meow Meow!  ");  // 16 characters with padding
    } else {
        lcd_command(0x80);  // Set cursor to first line
        lcd_string("No Motion      ");  // 16 characters with padding
    }
}

void main() {
    // Set port directions
    TRISC = 0x00;   // PORTC output for LCD data
    TRISD = 0x3A;   // RD1 input (unused), RD3-RD5 inputs (PIRs), RD0/RD2 output (LCD)
    TRISB = 0x00;   // LEDs output
    TRISA = 0x00;   // PORTA output (optional)

    // Clear ports
    PORTC = 0x00;
    PORTD = 0x00;
    PORTB = 0x00;
    PORTA = 0x00;

    // Main loop
    while(1) {
        update_leds();
        update_display();
        __delay_ms(100);
    }
}
